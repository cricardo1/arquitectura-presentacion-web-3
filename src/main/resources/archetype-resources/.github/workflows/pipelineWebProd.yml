name: pipelineWebProd
# on:
#   workflow_dispatch:

on:
  pull_request:
    branches:
      - main
    types:
      - closed  

jobs:
  deploy_to_production:
    runs-on: self-hosted
    environment: Produccion

    outputs:
         GROUP_OUT: ${{ steps.var_setup.outputs.GROUP_ID }}
         ARTIFACT_OUT: ${{ steps.var_setup.outputs.ARTIFACT_ID }}
         VERSION_OUT: ${{ steps.var_setup.outputs.VERSION }}
         NAME_OUT: ${{ steps.var_setup.outputs.NAME_ID }}
         BRANCH_OUT: ${{ steps.var_setup.outputs.BRANCH_NAME }}
         REPOSITORY_OUT: ${{ steps.var_setup.outputs.REPOSITORY_NAME }}
         
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # - name: Check if PR is merged and approved
      #   id: check_approval
      #   run: |
      #     echo "Checking if PR is merged and approved..."
      #     if [[ ${{ github.event_name }} == 'pull_request' && ${{ github.event.pull_request.merged }} == true && ${{ github.event.pull_request.base.ref }} == 'preproduccion' ]]; then
      #       echo "PR aceptado en rama de main."
      #       echo "approved=true" >> $GITHUB_OUTPUT
      #       echo "approved=true" >> $GITHUB_ENV
      #     else
      #       echo "PR no es aceptado en la rama de main."
      #       echo "approved=false" >> $GITHUB_OUTPUT
      #       echo "approved=false" >> $GITHUB_ENV
      #     fi

      - name: read_pom_xml and setting variables
        id: var_setup
       # if: steps.check_approval.outputs.approved == 'true'
        run: |
          # USE GREP TO EXTRACT THE LINE WE NEED. SELECT SECOND OCCURENCE WITH SED. THEN CLEAN HTML TAGS WITH SED
          GROUP_ID_LOCAL=$(grep -m2 "<groupId>" ./pom.xml | sed -n 2p | sed 's/^.<groupId>//' | sed 's/<\/groupId>.$//')
          ARTIFACT_ID_PRE=$(grep -m2 "<artifactId>" ./pom.xml |  sed -n 2p | sed 's/^.<artifactId>//' | sed 's/<\/artifactId>.$//')
          VERSION_LOCAL=$(grep -m2 "<version>" ./pom.xml |  sed -n 2p | sed 's/^.<version>//' | sed 's/<\/version>.$//')
          ARTIFACT_ID_LOCAL="${ARTIFACT_ID_PRE}-presentacion"
          NAME_LOCAL="${ARTIFACT_ID_LOCAL}-${VERSION_LOCAL}.war"
          BRANCH_LOCAL=$(echo "${{ github.event.pull_request.head.ref }}")
          #BRANCH_LOCAL=$(echo "${GITHUB_REF_NAME}")
          REPOSITORY_NAME=$(echo "${GITHUB_REPOSITORY}" | sed 's/.*\///')
                              
          echo "GroupID=$GROUP_ID_LOCAL and more"
          echo "ArtifactID=$ARTIFACT_ID_LOCAL and more"
          echo "Version=$VERSION_LOCAL and more"
          echo "Name = $NAME_LOCAL"
          echo "Branch = $BRANCH_LOCAL"
          echo "RepositoryName = $REPOSITORY_NAME"
          
          # SET VARIABLES TO GITHUB_ENVIRONMENT AND OUTPUT
          echo "GROUP_ID=$(echo $GROUP_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "GROUP_ID=$(echo $GROUP_ID_LOCAL)" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo $ARTIFACT_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "ARTIFACT_ID=$(echo $ARTIFACT_ID_LOCAL)" >> $GITHUB_ENV
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_OUTPUT
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_ENV
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_OUTPUT
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_OUTPUT
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_ENV

          
      - name: Setting Java
        #if: steps.check_approval.outputs.approved == 'true'
        run: |
          echo "JAVA_HOME=/opt/middleware/jvm/jdk1.8.0_211" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      - name: Check properties file on runner
        #if: steps.check_approval.outputs.approved == 'true'
        run: |
          cd /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades
          ls -la
          pwd

      - name: Finding last version of the artifact in Nexus
      #  if: steps.check_approval.outputs.approved == 'true'
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}  
          NEXUS_PASSWORD: ${{ secrets.NEXUS_TOKEN }}
          NEXUS_URL: ${{ secrets.NEXUS_URL_PRE }}
          NEXUS_REPOSITORY: ${{ secrets.NEXUS_REPOSITORY_PROD }}
          NEXUS_GROUP: ${{ env.REPOSITORY_NAME }}
        run: |
          response=$(curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD -s "$NEXUS_URL/service/rest/v1/search/assets?repository=$NEXUS_REPOSITORY&group=$NEXUS_GROUP" -H "accept: application/json")
          latest_version=$(echo $response | jq -r '.items | sort_by(.lastModified) | reverse | .[0].maven2.version')
          echo "La última versión del artefacto en Nexus es: $latest_version"
          version_corta=$(echo $latest_version | awk -F'-' '{print $1}')
          echo "La version corta es: $version_corta"
          
          # Descargar el artefacto con la ultima version
          mkdir -p "downloaded-artifacts-nexus"
          artifact_url="$NEXUS_URL/repository/$NEXUS_REPOSITORY/$NEXUS_GROUP/$NEXUS_GROUP-presentacion/$version_corta/$NEXUS_GROUP-presentacion-$latest_version.war"
          echo "La url en nexus es: $artifact_url"
          filename=$(basename "$artifact_url")
          echo "El nombre del archivo es: $filename"
          curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD -o "downloaded-artifacts-nexus/$filename" "$artifact_url"
          pwd
          cd downloaded-artifacts-nexus
          pwd
          ls -la
          
          echo "ARTIFACT-VERSION=$version_corta" >> $GITHUB_OUTPUT
          echo "ARTIFACT-VERSION=$version_corta" >> $GITHUB_ENV

          
### Inicia bloque para implementación de procesamiento de archivo properties

      - name: Check secret value
        id: check_secret
        #if: steps.check_approval.outputs.approved == 'true'
        run: |
           if [[ "${{ secrets.ARCHIVO_PROPERTIES_PROD }}" == "N" ]]; then
             echo "La variable tiene el valor de 'N'. Significa que No se realizará la copia del archivo. Continua el flujo hacia Produccion"
             echo "copia_archivo_properties=false" >> $GITHUB_OUTPUT
             echo "copia_archivo_properties=false" >> $GITHUB_ENV
           else
             echo "copia_archivo_properties=true" >> $GITHUB_OUTPUT
             echo "copia_archivo_properties=true" >> $GITHUB_ENV
           fi

      - name: Install sshpass
        run: |
          sudo yum install -y sshpass
        if: ${{ env.copia_archivo_properties == 'true' }}

      - name: Update ssh_config and restart SSH
        run: |
           cat /etc/ssh/ssh_config
           sudo sed -i 's/^.*RhostsRSAAuthentication.*$/# RhostsRSAAuthentication yes/' /etc/ssh/ssh_config
           sudo systemctl restart sshd
           cat /etc/ssh/ssh_config
        if: ${{ env.copia_archivo_properties == 'true' }} 

### Copying in remote server 1                

      - name: Copy file properties on remote server 1
        run: |
           server1=$(sshpass -p ${{ secrets.AP_PASSWORD_PROD }} ssh ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD1 }} '[ -f ${{ secrets.AP_RUTA_PROD }}/${{ env.REPOSITORY_NAME }}.properties ] && echo "SI" || echo "NO"')
           echo "Resultado_server1: $server1"
          
           sshpass -p ${{ secrets.AP_PASSWORD_PROD }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/${{ env.REPOSITORY_NAME }}.properties ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD1 }}:${{ secrets.AP_RUTA_PROD }}
           echo "Archivo properties actualizado exitosamente en servidor 1"
        if: ${{ env.copia_archivo_properties == 'true' }} 

      - name: Copy file log4j2.xml on remote server 1
        run: |
          server1=$(sshpass -p ${{ secrets.AP_PASSWORD_PROD }} ssh ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD1 }} '[ -f ${{ secrets.AP_RUTA_PROD }}/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ] && echo "SI" || echo "NO"')
          echo "Resultado_server1: $server1"
          
          sshpass -p ${{ secrets.AP_PASSWORD_PROD }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD1 }}:${{ secrets.AP_RUTA_PROD }}/log4j2
          echo "Archivo log4j2.xml actualizado exitosamente en servidor 1"
        if: ${{ env.copia_archivo_properties == 'true' }} 

      - name: Execute setting environment on remote server 1
        run: |
          OUTPUT=$(sshpass -p ${{ secrets.AP_PASSWORD_PROD }} ssh -o StrictHostKeyChecking=no ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD1 }} '
            # Imprimir el directorio actual
            echo "Directorio actual:";
            pwd;
      
            # Imprimir variables de entorno
            echo "Variables de entorno:";
            env;
      
            # Ejecutar el script
            echo "Ejecutando el script:";
            bash ${{ secrets.WEBLOGIC_RUTA_SET_PROD }}/setWLSEnv.sh 2>&1
          ')
          echo "$OUTPUT"

### Copying in remote server 2

      - name: Copy file properties on remote server 2
        run: |
          server2=$(sshpass -p ${{ secrets.AP_PASSWORD_PROD }} ssh ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD2 }} '[ -f ${{ secrets.AP_RUTA_PROD }}/${{ env.REPOSITORY_NAME }}.properties ] && echo "SI" || echo "NO"')
          echo "Resultado_server2: $server2"
          
          sshpass -p ${{ secrets.AP_PASSWORD_PROD }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/${{ env.REPOSITORY_NAME }}.properties ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD2 }}:${{ secrets.AP_RUTA_PROD }}
          echo "Archivo properties actualizado exitosamente en servidor 2"  
        if: ${{ env.copia_archivo_properties == 'true' }} 

      - name: Copy file log4j2.xml on remote server 2
        run: |
          server2=$(sshpass -p ${{ secrets.AP_PASSWORD_PROD }} ssh ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD2 }} '[ -f ${{ secrets.AP_RUTA_PROD }}/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ] && echo "SI" || echo "NO"')
          echo "Resultado_server2: $server2"
          
          sshpass -p ${{ secrets.AP_PASSWORD_PROD }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD2 }}:${{ secrets.AP_RUTA_PROD }}/log4j2
          echo "Archivo log4j2.xml actualizado exitosamente en servidor 2"
        if: ${{ env.copia_archivo_properties == 'true' }}  

      - name: Execute setting environment on remote server 2
        run: |
          OUTPUT=$(sshpass -p ${{ secrets.AP_PASSWORD_PROD }} ssh -o StrictHostKeyChecking=no ${{ secrets.AP_USERNAME_PROD }}@${{ secrets.AP_SERVER_PROD2 }} '
            # Imprimir el directorio actual
            echo "Directorio actual:";
            pwd;
      
            # Imprimir variables de entorno
            echo "Variables de entorno:";
            env;
      
            # Ejecutar el script
            echo "Ejecutando el script:";
            bash ${{ secrets.WEBLOGIC_RUTA_SET_PROD }}/setWLSEnv.sh 2>&1
          ')
          echo "$OUTPUT"

### Termina bloque para implementacion de procesamiento de archivo properties
      
      - name: Check Artifact exists
        #if: steps.check_approval.outputs.approved == 'true'
        id: artifact-version
        run: |
          set -x
          salida=$(java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
          -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
          -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
          -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
          -listapps | grep "${{ env.REPOSITORY_NAME }}-presentacion" | sed 's/^$/0/' )

          echo "OUTPUT=$salida" >> $GITHUB_OUTPUT
          echo "OUTPUT=$salida" >> $GITHUB_ENV
          echo "EXIT_CODE=${?}" >> $GITHUB_OUTPUT
          echo "EXIT_CODE=${?}" >> $GITHUB_ENV

      - name: Check exit code, deploy first time or incorrect name
        id: check-exit
        run: |
            if [[ "${{ env.EXIT_CODE }}" -eq 0 && -z "${{ env.OUTPUT }}" ]]; then
            # este codigo es cuando el artefacto no existe en weblogic, primera vez que se despliega al ambiente Weblogic Produccion
              echo "Command executed successfully"
              echo "La aplicación no se encontró, se realiza primer deploy a Weblogic Produccion .. "
              java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
              -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
              -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
              -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
              -deploy -name ${{ env.REPOSITORY_NAME }}-presentacion-${{ env.ARTIFACT-VERSION }}  -remote \
              -source /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts-nexus/${{ env.REPOSITORY_NAME }}-presentacion-${{ env.ARTIFACT-VERSION }}.war -upload \
              -targets ${{ secrets.WEBLOGIC_CLUSTER_PROD }}
            
              echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_OUTPUT
              echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_ENV
              echo "Proceso terminado- Primer Deploy con exito a Weblogic Produccion del proyecto ${{ env.REPOSITORY_NAME }}"
                 
            else
              # este codigo es cuando el artefacto si existe, pero hay que validar si tiene o no version incluida en el nombre
              echo "Command failed with exit code ${{ env.EXIT_CODE }}"
              if [[ ! -z "${{ env.OUTPUT }}" ]]; then
                salida=$(java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
                -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
                -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
                -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
                -listapps | grep "${{ env.REPOSITORY_NAME }}-presentacion*" )
                echo "Artifact-name: $salida"
                echo "artifact-name=$(echo $salida)" >> $GITHUB_OUTPUT
                echo "artifact-name=$(echo $salida)" >> $GITHUB_ENV
                versionado=$(echo "$salida" | gawk -F'-' '{print $NF}')
                echo "versionado: $versionado"

                if [ "$versionado" = "" ]; then
                  echo "Significa que no hay version, desplegarse el mismo objeto"
                  
                  java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
                  -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
                  -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
                  -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
                  -undeploy -name ${{ env.REPOSITORY_NAME }}-presentacion-  -remote \
                  -targets ${{ secrets.WEBLOGIC_CLUSTER_PROD }}
    
                  echo "Esperando a que se complete el undeploy del artefacto..."
                  sleep 15
                  echo "Iniciando el deploy"
                 
                  java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
                  -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
                  -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
                  -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
                  -deploy -name ${{ env.REPOSITORY_NAME }}-presentacion-${{ env.ARTIFACT-VERSION }}  -remote \
                  -source /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts-nexus/${{ env.REPOSITORY_NAME }}-presentacion-${{ env.ARTIFACT-VERSION }}.war -upload \
                  -targets ${{ secrets.WEBLOGIC_CLUSTER_PROD }}

                   echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_OUTPUT
                   echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_ENV
                   echo "Proceso terminado- Deploy con exito Weblogic Produccion- version ${{ env.ARTIFACT-VERSION }}"
                  
                else
                
                   echo "Significa que si existe el objeto pero hay que reemplazarlo pues trae nueva version"
                   salida=$(java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
                     -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
                     -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
                     -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
                     -listapps | grep "${{ env.REPOSITORY_NAME }}-presentacion*" )
                   echo "Artifact-name: $salida"
                   versionado=$(echo "$salida" | gawk -F'-' '{print $NF}')
                   echo "versionado: $versionado"
                   echo "version-deployada=$versionado" >> $GITHUB_ENV
                   echo "no-ejecutar-siguientes-pasos=false" >> $GITHUB_OUTPUT
                   echo "no-ejecutar-siguientes-pasos=false" >> $GITHUB_ENV
                 fi
               fi
             fi 
        
      - name: Undeploy weblogic, deploy Weblogic Produccion w/version releases
        run: |
            java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
              -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
              -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
              -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
              -undeploy -name ${{ env.REPOSITORY_NAME }}-presentacion-${{ env.version-deployada }}  -remote \
              -targets ${{ secrets.WEBLOGIC_CLUSTER_PROD }}
  
            echo "Esperando a que se complete el undeploy del artefacto..."
            sleep 15
            echo "Iniciando el deploy"
            echo "nuevaVersion: ${{ env.ARTIFACT-VERSION }}"
  
            java -cp ${{ secrets.WEBLOGIC_RUTA_DEPLOYER_PROD }} weblogic.Deployer \
              -adminurl ${{ secrets.WEBLOGIC_HOST_PROD }} \
              -username ${{ secrets.WEBLOGIC_USERNAME_PROD }} \
              -password ${{ secrets.WEBLOGIC_PASSWORD_PROD }} \
              -deploy -name ${{ env.REPOSITORY_NAME }}-presentacion-${{ env.ARTIFACT-VERSION }}  -remote \
              -source /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts-nexus/${{ env.REPOSITORY_NAME }}-presentacion-${{ env.ARTIFACT-VERSION }}.war -upload \
              -targets ${{ secrets.WEBLOGIC_CLUSTER_PROD }}

            echo "Proceso completo - Deploy con exito Weblogic Produccion"      
        if: ${{ env.no-ejecutar-siguientes-pasos == 'false' }}


### Paso para mantener solo los 3 artefactos más recientes en Releases
          
      - name: Clean up old artifacts Nexus releases
        env:
          NEXUS_URL: ${{ secrets.NEXUS_URL_PRE }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_TOKEN }}
          NEXUS_REPOSITORY: ${{ secrets.NEXUS_REPOSITORY_PROD }}
          NEXUS_GROUP: ${{ env.REPOSITORY_NAME }}
          ARTIFACT_NAME: ${{ env.REPOSITORY_NAME }}-presentacion
        run: |
          # Obtén todas las versiones
          VERSIONS=$(curl -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" -X GET "$NEXUS_URL/service/rest/v1/search?repository=$NEXUS_REPOSITORY&group=$NEXUS_GROUP&name=$ARTIFACT_NAME" | jq -r '.items[].version')

          # Convierte las versiones en un array y ordena
          VERSION_ARRAY=($(echo "$VERSIONS" | sort -V))
          echo "El arreglo de versiones es: $VERSION_ARRAY"
          
          # Cuenta cuántas versiones hay y elimina las que no sean las tres más recientes
          VERSION_COUNT=${#VERSION_ARRAY[@]}
          echo "El conteo es: $VERSION_COUNT"
          if (( VERSION_COUNT > 3 )); then
          
            # Calcula cuántas versiones eliminar
            VERSIONS_TO_DELETE=$(($VERSION_COUNT - 3))
            echo "Removing $VERSIONS_TO_DELETE old versions from Nexus:"
            
            # Imprimir versiones a eliminar
            for ((i=0; i<VERSIONS_TO_DELETE; i++)); do
              VERSION=${VERSION_ARRAY[i]}
              echo "- $VERSION"
            done
            
            # Elimina las versiones antiguas dejando solo las 3 versiones mas recientes
            for ((i=0; i<VERSIONS_TO_DELETE; i++)); do
              VERSION=${VERSION_ARRAY[i]}
              echo "Eliminando la version $VERSION from Nexus Releases"
              asset_ids=$(curl -s -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" \
                      "$NEXUS_URL/service/rest/v1/search/assets?repository=$NEXUS_REPOSITORY&group=$NEXUS_GROUP&version=$VERSION" | \
                      jq -r '.items[].id')
                  for asset_id in $asset_ids; do
                      if [[ -n "$asset_id" ]]; then
                          curl -s -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" -X DELETE "$NEXUS_URL/service/rest/v1/assets/$asset_id"
                      else
                          echo "No se encontró ningún artefacto en Nexus Releases para la versión $VERSION"
                      fi
                  done
            done
          else
            echo "No hay versiones para eliminar. Se mantienen las $VERSION_COUNT versiones mas recientes."
          fi            
